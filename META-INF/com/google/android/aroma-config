#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##
# Initializing Rom Information
##

setvar("preset_version","12");
setvar("adaroma","/data/media/0/ArchiDroid/AromaPreset/2.X");

ini_set("dp","3");
ini_set("rom_name",             "ArchiDroid");
ini_set("rom_version",          "2.5.4");
ini_set("rom_author",           "JustArchi");
ini_set("rom_device",           "Samsung Galaxy S3");
ini_set("rom_date",             "September XXth, 2014");

##
# Show Animated Splash
##
anisplash(
	#-- Number of Loop
	1,

	#-- Frame 1 [ Image, duration in millisecond ]. <AROMA Resource Dir>/splash/a[1..6].png
	"preview/bootanimation/archilegacy", 2000,
	"preview/bootanimation/archi", 2000
);

#
# Set Small Font to Support all fonts
#
fontresload( "0", "ttf/DroidSans.ttf;ttf/DroidSansFallback.ttf;ttf/DroidSansArabic.ttf;", "12" ); #-- Use sets of font (Font Family)
fontresload( "1", "ttf/DroidSans.ttf;ttf/DroidSansFallback.ttf;ttf/DroidSansArabic.ttf;", "14" ); #-- Use sets of font (Font Family)

theme("touchwiz");

# Mount required filesystems
resexec("exec/admount.sh", "/system");
resexec("exec/admount.sh", "/data");
resexec("exec/admount.sh", "/cache");
resexec("exec/admount.sh", "/preload");
resexec("exec/admount.sh", "/storage/sdcard1");
resexec("exec/archidroid_init.sh", "2.X");
setvar("extsdinstall", resexec("exec/archidroid_detect_zip.sh"));


viewbox(
	#-- Title
	"Welcome!",

	#-- Text
	"Hello master, root@ArchiDroid here. Welcome to AROMA. You are about to install <b>"+
	#-- Get Config Value
	ini_get("rom_name")+ "</b> for <b>"+ini_get("rom_device")+"</b>.\n\n"+
	"Version:\t\t\t <b><#selectbg_g>"+ini_get("rom_version")+"</#></b>\n"+
	"Released:\t\t <b><#selectbg_g>"+ini_get("rom_date")+"</#></b>\n\n\n"+
	"Press <b>Next</b> to continue the installation.",

	#-- Icon
	"@welcome"
);

form(
	"ArchiDroid Language",
	"Which language would you like to use?",
	"@confirm",
	"lang.prop",

	"language","<#selectbg_g>Language</#>","","group",
	"langs/al.lang","Albanian","Shqiptar","select",
	"langs/zh_CN.lang","Chinese (Simplified)","简化字","select",
	"langs/cr.lang","Croatian","Hrvatski","select",
	"langs/da.lang","Danish","Dansk","select",
	"langs/nl.lang","Dutch","Nederlands","select",
	"langs/en.lang","English","","select.selected",
	"langs/fi.lang","Finnish","Suomi","select",
	"langs/fr.lang","French","Français","select",
	"langs/de.lang","German","Deutsch","select",
	"langs/el.lang","Greek","ελληνικά","select",
	"langs/hu.lang","Hungarian","Magyar","select",
	"langs/it.lang","Italian","Italiano","select",
	"langs/fa.lang","Persian","فارسي","select",
	"langs/pl.lang","Polish","Polski","select",
	"langs/pt.lang","Portuguese","Português","select",
	"langs/ru.lang","Russian","Pусский","select",
	"langs/es.lang","Spanish","Español","select",
	"langs/tr.lang","Turkish","Türkçe","select"
);

loadlang(file_getprop("/tmp/aroma-data/lang.prop","language"));

textbox(
	#-- Title
	"Changelog",

	#-- Subtitle
	"",

	#-- Icon
	"@info",

	#-- Text Content
	resread("_changelog.txt")
);

agreebox(
	#-- Title
	"<~archidroid.tos>",

	#-- Subtitle / Description
	"",

	#-- Icon
	"@license",

	#-- Text Content
	resread("tos.txt"),

	#-- Checkbox Text
	"<~terms.check>",

	#-- Unchecked Alert Message
	"<~terms.confirm>"
);

if resexec("exec/archidroid_check_experimental.sh", ini_get("rom_date")) == "0" then
	agreebox(
		#-- Title
		"ArchiDroid Experimental",

		#-- Subtitle / Description
		"",

		#-- Icon
		"@alert",

		#-- Text Content
		resread("experimental.txt"),

		#-- Checkbox Text
		"I fully understand that experimental versions may brick my device",

		#-- Unchecked Alert Message
		"<~terms.confirm>"
	);
endif;

textbox(
	#-- Title
	"<~archidroid.tos>",

	#-- Subtitle / Description
	"",

	#-- Icon
	"@license",

	#-- Text Content
	resread("thirdparty.txt")
);

form(
	"<~archidroid.preset>",
	"<~archidroid.preset.desc>",
	"@apps",
	"archidroidinstallmode.prop",

	"preset","<#selectbg_g><~archidroid.preset.group></#>","","group",
	"custom","<~archidroid.preset.custom>", "<~archidroid.preset.custom.desc>","select",
	"previous","<~archidroid.preset.previous>","<~archidroid.preset.previous.desc>","select.selected",
	"previousexpert","<~archidroid.preset.previous> Expert","<~archidroid.preset.previousexpert.desc>","select",
	"barebones","<~archidroid.preset.barebones>","<~archidroid.preset.barebones.desc>","select",
	"recovery","Recovery","<~archidroid.preset.recovery.desc>","select"
);

################
### RECOVERY ###
################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
form(
	"<~archidroid.custom>",
	"<~archidroid.custom.desc>",
	"@apps",
	"archidroidrecovery.prop",

	"recovery","<#selectbg_g>Recovery</#>","","group",
	"twrp","TWRP Recovery","","select.selected",
	"philz","PhilZ Touch Recovery","","select",
	"devil","Devil Recovery [F2FS]","","select"
);
else
	writetmpfile(
		"archidroidrecovery.prop",
		"recovery=none\n"
	);
endif;

#######################
### PREVIOUS PRESET ###
#######################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "previous" then
	setvar("preset_version_probe",read(getvar("adaroma")+"/version.txt"));
	if getvar("preset_version_probe")!=getvar("preset_version") then
		alert("ArchiDroid Wizard","<~archidroid.detect.previouspreset.fail>","@alert");
		writetmpfile("archidroidinstallmode.prop","preset=custom\n");
	else
		writetmpfile("archidroid.prop",read(getvar("adaroma")+"/archidroid.prop"));
		writetmpfile("archidroidboeffla.prop",read(getvar("adaroma")+"/archidroidboeffla.prop"));
		writetmpfile("archidroidxposed.prop",read(getvar("adaroma")+"/archidroidxposed.prop"));
		writetmpfile("archidroidbuild.prop",read(getvar("adaroma")+"/archidroidbuild.prop"));
	endif;
endif;

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "previousexpert" then
	setvar("preset_version_probe",read(getvar("adaroma")+"/version.txt"));
	writetmpfile("archidroidinstallmode.prop","preset=custom\n");
	if getvar("preset_version_probe")!="" then
		writetmpfile("archidroid.prop",read(getvar("adaroma")+"/archidroid.prop"));
		writetmpfile("archidroidboeffla.prop",read(getvar("adaroma")+"/archidroidboeffla.prop"));
		writetmpfile("archidroidxposed.prop",read(getvar("adaroma")+"/archidroidxposed.prop"));
		writetmpfile("archidroidbuild.prop",read(getvar("adaroma")+"/archidroidbuild.prop"));
	endif;
endif;

###############################
### CUSTOM TYPE INSTALATION ###
###############################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "custom" then
	pleasewait("Executing Shell...");
	resexec("exec/archidroid_check_bcm4334.sh");
	setvar("bcm4334", getvar("exec_buffer"));
	form(
		"<~archidroid.custom>",
		"<~archidroid.custom.desc>",
		"@apps",
		"archidroid.prop",

		"kernel","<#selectbg_g>Kernel</#>","","group",
		"archi","ArchiKernel","<~archidroid.kernel.archi.desc>","select.selected",
		"boeffla","Boeffla","<~archidroid.kernel.boeffla.desc>","select",
		"yank","Yank555.lu","<~archidroid.kernel.yank.desc>","select",
		"agni","AGNi","<~archidroid.kernel.agni.desc>","select",
		"stock","Stock","<~archidroid.kernel.stock.desc>","select",

		"dpi","<#selectbg_g>DPI</#>","","group",
		"240","240","<~archidroid.dpi.240.desc>","select.selected",
		"260","260","","select",
		"280","280","<~archidroid.dpi.280.desc>","select",
		"300","300","","select",
		"320","320","<~archidroid.dpi.320.desc>","select",

		"launcher","<#selectbg_g>Launcher</#>","","group",
		"google","Google","<~archidroid.launcher.google.desc>","select",
		"nova","Nova","<~archidroid.launcher.nova.desc>","select.selected",
		"stock","Stock","<~archidroid.launcher.stock.desc>","select",
		"none","<~common.none>","<~archidroid.launcher.none.desc>","select",

		"keyboard","<#selectbg_g><~archidroid.keyboard></#>","","group",
		"google","Google","<~archidroid.keyboard.google.desc>","select.selected",
		"hackers","Hacker's","<~archidroid.keyboard.hackers.desc>","select",
		"both","Google + Hacker's","<~archidroid.keyboard.both.desc>","select",
		"stock","Stock","<~archidroid.keyboard.stock.desc>","select",
		"none","<~common.none>","<~archidroid.keyboard.none.desc>","select",

		"bootanimation","<#selectbg_g><~archidroid.bootanimation></#>","","group",
		"archi","ArchiDroid","<~archidroid.bootanimation.archi.desc>","select.selected",
		"archilegacy","ArchiDroid Legacy","<~archidroid.bootanimation.archilegacy.desc>","select",
		"archiminimalistic","ArchiDroid Minimalistic","Thanks to DroidShift79","select",
		"archiminimalistic2","ArchiDroid Minimalistic V2","Thanks to DroidShift79","select",
		"logcat","Logcat","<~archidroid.bootanimation.logcat.desc>","select",
		"stock","Stock","<~archidroid.bootanimation.stock.desc>","select",
		"none","<~common.none>","<~archidroid.bootanimation.none.desc>","select",
		"bootanimationpreview","Preview","<~archidroid.preview.desc>","check",

		"bcm4334","<#selectbg_g>BCM Profiling</#>","","group",
		"archidetect","ArchiDetect","Apply automatically if possible. Detected: "+getvar("bcm4334"),"select.selected",
		"stock","Stock","","select",
		"murata","Murata","","select",
		"semco","Semco","","select",
		"semcosh","Semcosh","","select",

		"superuser","<#selectbg_g>Superuser</#>","","group",
		"koush","Superuser by Koush","<~archidroid.superuser.koush.desc>","select.selected",
		"chainfire","SuperSU by Chainfire","<~archidroid.superuser.chainfire.desc>","select",
		"none","<~common.none>","<~archidroid.superuser.none.desc>","select",

		"other","<#selectbg_g><~archidroid.other></#>","","group",
		"archidroidota","ArchiDroid OTA","<~archidroid.ota.desc>","check.checked",
		"xposed","Xposed Framework","<~archidroid.xposed.desc>","check.checked",
		"updatemodem","<~archidroid.updatemodem> [XXUGNA8]","<~archidroid.updatemodem.desc>","check",

		"archiapps","<#selectbg_g>ArchiDroid Apps</#>","","group",
		"titaniumbackup","Titanium Backup","<~archidroid.apps.titaniumbackup.desc>","check.checked",
		"greenify","Greenify","<~archidroid.apps.greenify.desc>","check.checked",
		"lmt","LMT","<~archidroid.apps.lmt.desc>","check.checked",
		"mxplayer","MXPlayer","<~archidroid.apps.mxplayer.desc>","check.checked",
		"spiritfm","Spirit FM","<~archidroid.apps.spiritfm.desc>","check.checked",
		"cooltool","CoolTool","<~archidroid.apps.cooltool.desc>","check.checked",
		"rootbrowser","Root Browser","<~archidroid.apps.rootbrowser.desc>","check.checked",

		"architweaks","<#selectbg_g>ArchiDroid Tweaks</#>","","group",
		"buildtweaks","Add build.prop Tweaks","<~archidroid.tweaks.buildtweaks.desc>","check.checked",
		"nocell","Remove Cell Broadcasts","<~archidroid.tweaks.nocell.desc>","check.checked"
	);
	if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimationpreview") == "1" then
		splash(4000,"preview/bootanimation/" + file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation"));
		back("1");
	endif;
	write(getvar("adaroma")+"/archidroid.prop",readtmpfile("archidroid.prop"));

	### ArchiDroid Extra ###
	if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "boeffla" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"icons/apps",
			"archidroidboeffla.prop",

			"preset","<#selectbg_g>Boeffla Kernel Preset</#>","","group",
			"archiperformance","<~archidroid.preset.kernel.boeffla.archiperformance>","<~archidroid.preset.kernel.boeffla.archiperformance.desc>","select",
			"archipowersave","<~archidroid.preset.kernel.boeffla.archipowersave>","<~archidroid.preset.kernel.boeffla.archipowersave.desc>","select.selected",
			"archiultrapowersave","<~archidroid.preset.kernel.boeffla.archiultrapowersave>","<~archidroid.preset.kernel.boeffla.archiultrapowersave.desc>","select",
			"no","<~archidroid.preset.no>","<~archidroid.preset.no.desc>","select"
		);
		write(getvar("adaroma")+"/archidroidboeffla.prop",readtmpfile("archidroidboeffla.prop"));
	endif;

	if file_getprop("/tmp/aroma-data/archidroid.prop","xposed") == "1" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"@apps",
			"archidroidxposed.prop",

			"modules","<#selectbg_g>Xposed Modules</#>","","group",
			"gravitybox","GravityBox","<~archidroid.xposed.gravitybox.desc>","check.checked",
			"xprivacy","XPrivacy","<~archidroid.xposed.xprivacy.desc>","check"
		);
		write(getvar("adaroma")+"/archidroidxposed.prop",readtmpfile("archidroidxposed.prop"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroid.prop","buildtweaks") == "1" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"@apps",
			"archidroidbuild.prop",

			"build","<#selectbg_g>Build.prop Tweaks</#>","","group",
			"fastdormancy","Fast Dormancy","<~archidroid.buildtweaks.fastdormancy.desc>","check.checked",
			"zerowakeup","ZeroWakeUp","<~archidroid.buildtweaks.zerowakeup.desc>","check",
			"navibar","Navigation Bar","<~archidroid.buildtweaks.navibar.desc>","check"
		);
		write(getvar("adaroma")+"/archidroidbuild.prop",readtmpfile("archidroidbuild.prop"));
	endif;
	write(getvar("adaroma")+"/version.txt",getvar("preset_version"));

	####################
	### F2FS SUPPORT ###
	####################
	pleasewait("Executing Shell...");
	setvar("f2fs_check",resexec("exec/archidroid_check_fs.sh"));
	resexec("exec/archidroid_check_fs.sh", "/system");
	setvar("systemfs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/cache");
	setvar("cachefs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/preload");
	setvar("preloadfs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/data");
	setvar("datafs", getvar("exec_buffer"));

	if getvar("f2fs_check") == "0" && (file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "devil" || file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "agni") then
		if getvar("extsdinstall") == "1" then
			# Variant 1, we have F2FS and extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		else
			# Variant 2, we have F2FS and intsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		endif;
	else
		if getvar("extsdinstall") == "1" then
			# Variant 3, we DON'T have F2FS but we have extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		else
			# Variant 4, we DON'T have F2FS neither extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		endif;
	endif;

	# Execute what we've got

	# SYSTEM
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","system") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/system", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","system") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/system", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;

	# PRELOAD
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","preload") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/preload", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","preload") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/preload", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;

	# CACHE
	# Stub, not possible to do anything due to mount lock, pending solution

	# DATA
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","data") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/data", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","data") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/data", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;

	###########################
	### ARCHIDROID HARDSWAP ###
	###########################
	pleasewait("Executing Shell...");
	resexec("exec/archidroid_hardswap_check.sh", "/cache");
	setvar("hardswapcache", getvar("exec_buffer"));
	resexec("exec/archidroid_hardswap_check.sh", "/preload");
	setvar("hardswappreload", getvar("exec_buffer"));
	resexec("exec/archidroid_hardswap_check.sh", "/storage/sdcard1");
	setvar("hardswapsdcard", getvar("exec_buffer"));

	form(
		"ArchiDroid Hardswap",
		"<~archidroid.hardswap.desc>",
		"icons/apps",
		"archidroidhardswap.prop",

		"cache","<#selectbg_g>Cache</#>","","group",
		"0","0 Megabytes","<~archidroid.hardswap.remove.desc>","select",
		"64","64 Megabytes","","select",
		"128","128 Megabytes","<~archidroid.hardswap.size.default.desc>","select",
		"256","256 Megabytes","","select",
		"512","512 Megabytes","","select",
		"current","Current: "+getvar("hardswapcache"),"","select.selected",

		"preload","<#selectbg_g>Preload</#>","","group",
		"0","0 Megabytes","<~archidroid.hardswap.remove.desc>","select",
		"64","64 Megabytes","","select",
		"128","128 Megabytes","<~archidroid.hardswap.size.default.desc>","select",
		"256","256 Megabytes","","select",
		"512","512 Megabytes","","select",
		"current","Current: "+getvar("hardswappreload"),"","select.selected",

		"sdcard1","<#selectbg_g>External SD Card</#>","","group",
		"0","0 Megabytes","<~archidroid.hardswap.remove.desc>","select",
		"64","64 Megabytes","","select",
		"128","128 Megabytes","<~archidroid.hardswap.size.default.desc>","select",
		"256","256 Megabytes","","select",
		"512","512 Megabytes","","select",
		"current","Current: "+getvar("hardswapsdcard"),"","select.selected"
	);

	if file_getprop("/tmp/aroma-data/archidroidhardswap.prop","cache") != "current" then
		pleasewait("Applying Hardswap...");
		resexec("exec/archidroid_hardswap.sh", "/cache", file_getprop("/tmp/aroma-data/archidroidhardswap.prop","cache"));
		textbox("ArchiDroid Partition Wizard", "", "@default", getvar("exec_buffer"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidhardswap.prop","preload") != "current" then
		pleasewait("Applying Hardswap...");
		resexec("exec/archidroid_hardswap.sh", "/preload", file_getprop("/tmp/aroma-data/archidroidhardswap.prop","preload"));
		textbox("ArchiDroid Partition Wizard", "", "@default", getvar("exec_buffer"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidhardswap.prop","sdcard1") != "current" then
		pleasewait("Applying Hardswap...");
		resexec("exec/archidroid_hardswap.sh", "/storage/sdcard1", file_getprop("/tmp/aroma-data/archidroidhardswap.prop","sdcard1"));
		textbox("ArchiDroid Partition Wizard", "", "@default", getvar("exec_buffer"));
	endif;
endif;

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") != "recovery" then
	#########################
	### ARCHIDROID DETECT ###
	#########################
	setvar("resexec_retstatus",resexec("exec/archidroid_detect.sh"));

	if getvar("resexec_retstatus")=="0" || getvar("resexec_retstatus")=="1" then
		if confirm(
			"ArchiDroid Detect",
			"<~archidroid.detect.fail>",
			"@info",
			"<~archidroid.detect.fail.yes>",
			"<~archidroid.detect.fail.no>"
		)=="yes" then
			alert("ArchiDroid Detect","<~archidroid.detect.fail.alert.yes>","@info");
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=yes\n"
			);
		else
			alert("ArchiDroid Detect","<~archidroid.detect.fail.alert.no>","@alert");
			setvar("resexec_retstatus","2");
		endif;
	endif;
	if getvar("resexec_retstatus")=="2" then
		if confirm(
			"ArchiDroid Detect",
			"<~archidroid.detect.pass>",
			"@info",
			"<~archidroid.detect.pass.yes>",
			"<~archidroid.detect.pass.no>"
		)=="yes" then
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=no\n"+
				"force=no\n"
			);
			if confirm(
				"ArchiDroid Detect",
				"<~archidroid.detect.force>",
			"@alert"
			)=="yes" then
				writetmpfile(
					"archidroidwipe.prop",
					"wipe=no\n"+
					"force=yes\n"
				);
			else
				writetmpfile(
					"archidroidwipe.prop",
					"wipe=no\n"+
					"force=no\n"
				);
			endif;
		else
			alert("ArchiDroid Detect","<~archidroid.detect.pass.alert.no>","@info");
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=yes\n"
			);
		endif;
	endif;
endif;

ini_set("text_next", "<~common.flash>");
viewbox(
	"<~archidroid.prepinstall>",
	"<~archidroid.prepinstall.desc>",
	"@alert"
);

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
	ini_set("text_next", "<~common.reboot>");
else
	ini_set("text_next", "<~common.finish>");
endif;
resexec("exec/admount.sh", "/system");
resexec("exec/admount.sh", "/data");

install(
	"<~common.flashing>",
	"<~archidroid.install.desc>",
	"@install",
	"<~archidroid.install.finish>"
);

resexec("exec/adumount.sh", "/system");
resexec("exec/adumount.sh", "/data");
resexec("exec/adumount.sh", "/cache");
resexec("exec/adumount.sh", "/preload");
resexec("exec/adumount.sh", "/storage/sdcard1");

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
	resexec("exec/rebootrecovery.sh");
else
	if confirm(
		"ArchiDroid Wizard",
		"<~archidroid.wizard.reboot>",
		"@confirm"
	)=="yes" then
		reboot("onfinish");
	endif;
endif;

# Delayed tasks. These for some reason require already flashed ArchiDroid
# Stub
